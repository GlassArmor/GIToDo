{"version":3,"sources":["components/NewTaskForm/NewTaskForm.js","components/NewTaskForm/index.js","components/Header/Header.js","components/Header/index.js","components/Task/Task.js","components/Task/index.js","components/TaskList/TaskList.js","components/TaskList/index.js","components/TasksFilter/TasksFilter.js","components/TasksFilter/index.js","components/Footer/Footer.js","components/Footer/index.js","components/App/index.js","components/App/App.js","index.js"],"names":["NewTaskForm","state","inputValue","onSubmit","e","preventDefault","props","onItemAdded","setState","onChange","target","value","this","type","className","placeholder","autoFocus","Component","defaultProps","Header","Task","onEdit","id","taskText","taskDate","taskCompleted","taskEditing","onDeleted","onDone","visible","inputString","nameString","onClick","defaultChecked","formatDistanceToNow","includeSeconds","Date","TaskList","dealsData","mode","tasks","map","item","key","TasksFilter","setMode","Footer","count","clearDone","App","maxId","createTask","deleteTask","keyIndex","findIndex","elem","slice","addTask","newText","elementDone","elementEditing","filter","modeName","undoneCount","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b38130f6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './NewTaskForm.css';\n\nimport PropTypes from 'prop-types';\n\nexport default class NewTaskForm extends Component {\n\n  static defaultProps = {\n    onItemAdded: ()=>{}\n  }\n\n  static propTypes = {\n    onItemAdded: PropTypes.func\n  }\n\n  constructor() {\n    super();\n\n    this.state = {\n      inputValue: ''\n    }\n\n    this.onSubmit = (e) => {\n      e.preventDefault();\n      this.props.onItemAdded(this.state.inputValue);\n      this.setState({inputValue:''});\n    }\n\n    this.onChange = (e) => {\n      this.setState({ inputValue: e.target.value });\n    }\n\n  }\n\n  render() {\n    return (\n      <form onSubmit = { this.onSubmit }>\n        <input value = { this.state.inputValue } type='text' className='new-todo'\n               placeholder='What needs to be done?'\n               onChange = { this.onChange }\n               autoFocus />\n      </form>\n    );\n  }\n}\n","import NewTaskForm from './NewTaskForm.js';\n\nexport default NewTaskForm;\n","import React from 'react';\nimport './Header.css';\n\nimport PropTypes from 'prop-types';\n\nimport NewTaskForm from '../NewTaskForm';\n\nconst Header = ({onItemAdded}) => {\n  return (\n    <header className=\"header\">\n      <h1>Checkpoints</h1>\n      <NewTaskForm onItemAdded = {onItemAdded} />\n    </header>\n  );\n};\n\nHeader.defaultProps = {\n  onItemAdded: ()=>{}\n};\n\nHeader.propTypes = {\n  onItemAdded: PropTypes.func\n}\n\nexport default Header;\n","import Header from './Header.js';\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Task.css';\n\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport PropTypes from 'prop-types';\n\nexport default class Task extends Component {\n\n  static defaultProps = {\n    id: 'a0',\n    taskText: 'Some Epic task (Unlock legendary for only 9.99!..)',\n    taskDate: new Date(),\n    taskCompleted: false,\n    taskEditing: false,\n    onDeleted: ()=>{},\n    onDone: ()=>{} ,\n    onEdit: ()=>{},\n    visible: true\n  }\n\n  static propTypes = {\n    id: PropTypes.string,\n    taskText: PropTypes.string,\n    taskDate: PropTypes.instanceOf(Date),\n    taskCompleted: PropTypes.bool,\n    taskEditing: PropTypes.bool,\n    onDeleted: PropTypes.func,\n    onDone: PropTypes.func ,\n    onEdit: PropTypes.func,\n    visible: PropTypes.bool\n  }\n\n  constructor() {\n    super();\n\n    this.state = {\n      inputValue: ''\n    };\n\n    this.onSubmit = (e) => {\n      e.preventDefault();\n      this.props.onEdit(this.props.id, this.state.inputValue);\n      this.setState({ inputValue: '' });\n    };\n\n    this.onChange = (e) => {\n      this.setState({ inputValue: e.target.value });\n    };\n  }\n\n  render() {\n    let { id, taskText, taskDate, taskCompleted, taskEditing, onDeleted, onDone, onEdit, visible } = this.props;\n    if (!visible) return null;\n\n    let inputString = <form onSubmit={this.onSubmit}>\n                        <input type=\"text\" className=\"edit\"\n                                           placeholder=\"Edit task\"\n                                           onChange={ this.onChange }\n                                           value = { this.state.inputValue }\n                                           autoFocus />\n                      </form>;\n\n    let nameString = '';\n    if (taskCompleted) nameString += ' completed';\n    if (taskEditing) nameString += ' editing';\n    return (\n      <li className={nameString} >\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" onClick={ onDone } defaultChecked = {taskCompleted? true: false } />\n            <label>\n              <span className=\"description\" >{ taskText }</span>\n              <span className=\"created\">created { formatDistanceToNow(taskDate, {includeSeconds: true} ) } ago</span>\n            </label>\n            <button className=\"icon icon-edit\" onClick={ () => onEdit(id) } ></button>\n            <button className=\"icon icon-destroy\" onClick={ onDeleted }></button>\n        </div>\n        { this.props.taskEditing? inputString : null }\n      </li>\n    );\n  }\n\n};\n","import Task from './Task.js';\n\nexport default Task;\n","import React from 'react';\nimport './TaskList.css';\n\nimport PropTypes from 'prop-types';\n\nimport Task from '../Task';\n\nconst TaskList = ( { dealsData, mode, onDeleted, onDone, onEdit }) => {\n\n  let tasks = dealsData.map((item) => {\n    let visible = true;\n    if (mode === 'done' && !item.taskCompleted) visible = false;\n    if (mode === 'undone' && item.taskCompleted) visible = false;\n    return (\n      <Task key = {item.key}\n            id = {item.key}\n            taskText = {item.taskText}\n            taskDate = {item.taskDate}\n            taskCompleted = {item.taskCompleted}\n            visible = {visible}\n            taskEditing = {item.taskEditing}\n            onDeleted = { () => onDeleted(item.key) }\n            onDone = { () => onDone(item.key) }\n            onEdit = { onEdit } />\n    );\n  });\n\n  return (\n    <ul className=\"todo-list\">\n      {tasks}\n    </ul>\n  );\n};\n\nTaskList.defaultProps = {\n  dealsData: [],\n  mode: 'all',\n  onDeleted: ()=>{},\n  onDone: ()=>{},\n  onEdit: ()=>{}\n};\n\nTaskList.propTypes = {\n  dealsData: PropTypes.arrayOf(PropTypes.shape(\n           { key: PropTypes.string,\n             taskText: PropTypes.string,\n             taskDate: PropTypes.instanceOf(Date),\n             taskCompleted: PropTypes.bool,\n             taskEditing: PropTypes.bool,\n           } )),\n  mode: PropTypes.oneOf(['all', 'done', 'undone']),\n  onDeleted: PropTypes.func,\n  onDone: PropTypes.func,\n  onEdit: PropTypes.func\n};\n\nexport default TaskList;\n","import TaskList from './TaskList.js';\n\nexport default TaskList;\n","import React from 'react';\nimport './TasksFilter.css';\n\nimport PropTypes from 'prop-types';\n\nconst TasksFilter = ({mode, setMode}) => {\n  return (\n    <ul className=\"filters\">\n            <li>\n              <button className={mode==='all'? 'selected': '' } onClick={()=>setMode('all')}>All</button>\n            </li>\n            <li>\n              <button className={mode==='undone'? 'selected': '' } onClick={()=>setMode('undone')} >Active</button>\n            </li>\n            <li>\n              <button className={mode==='done'? 'selected': '' } onClick={()=>setMode('done')} >Completed</button>\n            </li>\n    </ul>\n  );\n};\n\nTasksFilter.defaultProps = {\n  mode: 'all',\n  setMode: ()=>{}\n};\n\nTasksFilter.propTypes = {\n  mode: PropTypes.oneOf(['all', 'done', 'undone']),\n  setMode: PropTypes.func\n};\n\nexport default TasksFilter;\n","import TasksFilter from './TasksFilter.js';\n\nexport default TasksFilter;\n","import React from 'react';\nimport './Footer.css';\n\nimport PropTypes from 'prop-types';\n\nimport TasksFilter from '../TasksFilter';\n\nconst Footer = ({count, clearDone, mode, setMode}) => {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{count} items left</span>\n      <TasksFilter mode={mode} setMode={setMode} />\n      <button className=\"clear-completed\" onClick={clearDone} >Clear completed</button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  count: 0,\n  clearDone: ()=>{},\n  mode: 'all',\n  setMode: ()=>{}\n};\n\nFooter.propTypes = {\n  count: PropTypes.number,\n  clearDone: PropTypes.func,\n  mode: PropTypes.string,\n  setMode: PropTypes.func\n}\n\n\n\nexport default Footer;\n","import Footer from './Footer.js';\n\nexport default Footer;\n","import App from './App.js';\n\nexport default App;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from '../Header';\nimport TaskList from '../TaskList';\nimport Footer from '../Footer';\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n\n    this.maxId = 0;\n\n    this.createTask = (taskText) => {\n      return   { key: `a${this.maxId++}`,\n                 taskText: taskText,\n                 taskDate: new Date(),\n                 taskCompleted: false,\n                 taskEditing: false,\n               };\n    }\n\n    this.state = {\n      dealsData: [ this.createTask('Some Epic deal!'),\n                   this.createTask('Unlock Legendary'),\n                   this.createTask('For only 9.99$!') ],\n      mode: 'all'\n    }\n\n    this.deleteTask = (key) => {\n\n      this.setState(({dealsData}) => {\n        let keyIndex = dealsData.findIndex((elem)=> elem.key === key);\n        return {\n          dealsData: [ ...dealsData.slice(0, keyIndex), ...dealsData.slice(keyIndex+1)]\n        }\n      });\n    }\n\n    this.addTask = (newText) => {\n\n      if (!newText) return;\n\n      this.setState(({dealsData}) => {\n\n        return {\n          dealsData: [ ...dealsData, this.createTask(newText) ]\n        }\n      });\n\n    }\n\n    this.onDone = (key) => {\n      this.setState(({dealsData}) => {\n        let keyIndex = dealsData.findIndex((elem)=> elem.key === key);\n        let elementDone = {...dealsData[keyIndex], taskCompleted: !dealsData[keyIndex].taskCompleted };\n        return {\n          dealsData: [ ...dealsData.slice(0, keyIndex), elementDone ,...dealsData.slice(keyIndex+1)]\n        }\n      });\n    }\n\n    this.onEdit = (key, newText) => {\n      this.setState(({dealsData}) => {\n        let keyIndex = dealsData.findIndex((elem)=> elem.key === key);\n        let elementEditing = {...dealsData[keyIndex], taskEditing: !dealsData[keyIndex].taskEditing };\n        if (newText) elementEditing.taskText = newText;\n        return {\n          dealsData: [ ...dealsData.slice(0, keyIndex), elementEditing ,...dealsData.slice(keyIndex+1)]\n        }\n      });\n    }\n\n    this.clearDone = () => {\n      this.setState(({dealsData}) => {\n        return {\n            dealsData: dealsData.filter((item) => !item.taskCompleted )\n        }\n      });\n    }\n\n    this.setMode = (modeName) => {\n      this.setState({ mode: modeName });\n    }\n\n  }\n\n  render() {\n    let {dealsData, mode} = this.state;\n    let undoneCount = dealsData.length - dealsData.filter( (elem) => elem.taskCompleted ).length;\n    return (\n      <section className = 'todoapp'>\n        <Header onItemAdded = {this.addTask} />\n        <section className = 'main'>\n          <TaskList dealsData = { dealsData }\n                    onDeleted = {this.deleteTask}\n                    onDone = { this.onDone }\n                    onEdit = { this.onEdit }\n                    mode = { mode } />\n          <Footer count = {undoneCount}\n                  clearDone = { this.clearDone }\n                  setMode = { this.setMode }\n                  mode = { mode } />\n        </section>\n      </section>\n    );\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}